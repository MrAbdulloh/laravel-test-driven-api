<?php

namespace Tests\Feature;

use App\Models\TodoList;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TodoListTest extends TestCase
{
    use RefreshDatabase;


    protected $list;

    protected function setUp(): void
    {
        parent::setUp();
        $this->list = TodoList::factory()->create();
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function fetch_all_todo_list()
    {

        $response = $this->getJson(route('todo-list.index'));

        $this->assertEquals(1, count($response->json()));
    }

    /** @test */
    public function fetch_single_todo_list()
    {
        $response = $this->getJson(route('todo-list.show', $this->list->id))
            ->assertOk();

        $this->assertEquals($response->json()['name'], $this->list->name);

    }

    /** @test */
    public function store_new_todo_list()
    {
//        $list = TodoList::factory()->make();
        $response = $this->postJson(route('todo-list.store'), ['name' => 'my list in db'])
            ->assertCreated()
            ->json();

        $this->assertSame('my list in db', $response['name']);

        $this->assertDatabaseHas('todo_lists', ['name' => 'my list in db']);
    }

//     validate

    /** @test */
    public function while_storing_todo_list_name_field_is_required()
    {

        $this->postJson(route('todo-list.store', $this->list->id), ['name' => $this->list->id])
            ->assertStatus(201);

    }

    /** @test */
    public function delete_todo_list()
    {
        $this->deleteJson(route('todo-list.destroy', $this->list->id))
            ->assertNoContent();

        $this->assertDatabaseMissing('todo_lists', ['name' => $this->list]);

    }

    /** @test */
    public function update_todo_list()
    {

        $this->patchJson(route('todo-list.update', $this->list->id), ['name' => $this->list->name])
            ->assertUnprocessable();
        $this->assertDatabaseHas('todo_lists', ['id' => $this->list->id, 'name' => $this->list->name]);
    }

    /** @test */

    public function while_updating_todo_list_name_field_is_required()
    {
        $this->withoutExceptionHandling();
        $this->patchJson(route('todo-list.update', $this->list->id), ['name' => $this->list->id])
            ->assertUnprocessable();

    }

}

